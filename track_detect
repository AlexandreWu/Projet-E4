import os
from ultralytics import YOLO
from pymongo import MongoClient
import datetime

# Définir la variable d'environnement pour OpenMP
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

# Configuration MongoDB
mongo_client = MongoClient('mongodb://localhost:27017/')
db = mongo_client['tracking_database']
humans_collection = db['humans']
suitcases_collection = db['suitcases']
associations_collection = db['associations']

# Initialisation du modèle YOLOv8
model = YOLO('yolov8n.pt')

def calculate_distance(bbox1, bbox2):
    center_x1, center_y1 = bbox1[0] + bbox1[2] / 2, bbox1[1] + bbox1[3] / 2
    center_x2, center_y2 = bbox2[0] + bbox2[2] / 2, bbox2[1] + bbox2[3] / 2
    return ((center_x1 - center_x2) ** 2 + (center_y1 - center_y2) ** 2) ** 0.5

def track_and_associate(video_path):
    class_ids = {'person': 0, 'suitcase': 28}
    results = model.track(source=video_path, show=True, tracker="bytetrack.yaml",
                          classes=list(class_ids.values()), save=True, name='tracking_results')

    for frame_result in results:
        timestamp = datetime.datetime.utcnow()
        
        # Traiter chaque détection
        for box in frame_result.boxes:
            track_id = box.id.item()
            class_id = box.cls.item()
            bbox = box.xywh.squeeze().tolist()
            conf = box.conf.item()

            # Document de détection
            detection_doc = {
                'track_id': track_id,
                'class_id': class_id,
                'bbox': bbox,
                'conf': conf,
                'timestamp': timestamp
            }

            # Choisir la collection appropriée et insérer le document de détection
            target_collection = humans_collection if class_id == class_ids['person'] else suitcases_collection
            target_collection.update_one({'track_id': track_id}, {'$set': detection_doc}, upsert=True)

            # Association et stockage des positions
            if class_id == class_ids['suitcase']:
                # Trouver le plus proche humain pour cette valise
                closest_human, min_distance = None, float('inf')
                for human in humans_collection.find():
                    human_bbox = human.get('bbox', [])
                    distance = calculate_distance(bbox, human_bbox)
                    if distance < min_distance:
                        min_distance = distance
                        closest_human = human['track_id']
                
                # Document d'association
                if closest_human is not None:
                    association_doc = {
                        'suitcase_id': track_id,
                        'human_id': closest_human,
                        'distance': min_distance,
                        'timestamp': timestamp
                    }
                    associations_collection.insert_one(association_doc)

# Exemple d'utilisation
video_path = 'C:/Users/EricR/Documents/Yolov8/test.mp4'
track_and_associate(video_path)

# Fermeture de la connexion MongoDB
mongo_client.close()

print("Suivi, détection et associations mises à jour dans MongoDB.")
